import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from sklearn.model_selection import train_test_split
from PIL import Image
import numpy as np
import os

class MMC_Dataset(Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.image_files = []
        self.labels = []
        
        for class_idx, class_name in enumerate(os.listdir(root_dir)):
            class_dir = os.path.join(root_dir, class_name)
            for image_file in os.listdir(class_dir):
                self.image_files.append(os.path.join(class_dir, image_file))
                self.labels.append(class_idx)
        
    def __len__(self):
        return len(self.image_files)
    
    def __getitem__(self, idx):
        image_path = self.image_files[idx]
        image = Image.open(image_path).convert("L")
        label = self.labels[idx]
        
        if self.transform:
            image = self.transform(image)
            
        return image, label

transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor(),
])

def main():
    root_dir = "./../../mmc-dataset"
    MMC = MMC_Dataset(root_dir=root_dir, transform=transform)
    
    

if __name__ == "__main__":
    main()
        